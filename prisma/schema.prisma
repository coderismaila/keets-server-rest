// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  username          String         @unique
  staffId           String         @unique
  role              Role           @default(USER)
  designation       Designation
  jobDescriptionId  String
  jobDescription    JobDescription @relation(fields: [jobDescriptionId], references: [id])
  password          String
  firstName         String
  lastName          String
  middleName        String?
  gender            Gender
  active            Boolean        @default(true)
  birthDate         DateTime?
  phoneNumber       String?        @unique
  addressLine1      String?
  addressLine2      String?
  city              String?
  state             String?
  stateOfOrigin     String?
  country           String?        @default("nigeria")
  stationId         String?
  station           Station?       @relation(fields: [stationId], references: [id])
  areaOfficeId      String?
  areaOffice        AreaOffice?    @relation(name: "areaOffice", fields: [areaOfficeId], references: [id])
  technicalManagers AreaOffice[]   @relation("technicalManager")
  areaManagers      AreaOffice[]   @relation("areaManager")
  outages           Outage[]

  Outage Outage[] @relation("tagHolder")
  @@index([email, username, staffId, phoneNumber])
}

model JobDescription {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  created     DateTime @default(now())
  updated     DateTime @updatedAt

  users User[]
}

model AreaOffice {
  id                 String    @id @default(cuid())
  name               String    @unique
  technicalManagerId String?   @unique
  technicalManager   User?     @relation(name: "technicalManager", fields: [technicalManagerId], references: [id])
  areaManagerId      String?   @unique
  areaManager        User?     @relation(name: "areaManager", fields: [areaManagerId], references: [id])
  users              User[]    @relation("areaOffice")
  stations           Station[] @relation("stationAreaOffice")
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  feeders            Feeder[]
}

model Station {
  id                String             @id @default(cuid())
  name              String             @unique
  stationType       StationType
  areaOfficeId      String?
  areaOffice        AreaOffice?        @relation(name: "stationAreaOffice", fields: [areaOfficeId], references: [id])
  powerTransformer  PowerTransformer[] @relation("stationPowerTransformer")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?          @updatedAt
  feeders           Feeder[]
  powerTransformers PowerTransformer[] @relation("sourceStation")
  users             User[]
}

model PowerTransformer {
  id                       String            @id @default(cuid())
  name                     String
  capacityKVA              Float             @default(0)
  voltageRating            String?
  ratedCurrent             String?
  transformerPeakLoadMW    Float?             @default(0)
  sourceStationId          String?
  sourceStation            Station?          @relation(name: "sourceStation", fields: [sourceStationId], references: [id])
  sourcePowerTransformerId String?
  sourcePowerTransformer   PowerTransformer? @relation(name: "powerTransformer", fields: [sourcePowerTransformerId], references: [id])
  feeder33kvId             String?
  feeder33kv               Feeder?           @relation(name: "feeder33kv", fields: [feeder33kvId], references: [id])
  stationId                String?
  station                  Station?          @relation(name: "stationPowerTransformer", fields: [stationId], references: [id])

  feeder    Feeder[] @relation("feederPowerTransformer")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PowerTransformers PowerTransformer[] @relation("powerTransformer")

  @@unique([name, stationId])
}

model Feeder {
  id                     String             @id @default(cuid())
  name                   String             @unique
  voltageLevel           VoltageLevel
  routeLength            Float?             @default(0)
  kaedcoCode             String?            @unique
  nercCode               String?
  areaOfficeId           String
  areaOffice             AreaOffice         @relation(fields: [areaOfficeId], references: [id])
  stationId              String
  station                Station            @relation(fields: [stationId], references: [id])
  powerTransformerId     String
  powerTransformer       PowerTransformer   @relation(name: "feederPowerTransformer", fields: [powerTransformerId], references: [id])
  powerTransformerSource PowerTransformer[] @relation("feeder33kv")
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  outages                Outage[]
  // loadReadings            LoadReading[]
}

model Outage {
  id              String     @id @default(cuid())
  feederId        String
  feeder          Feeder     @relation(fields: [feederId], references: [id])
  timeOut         DateTime
  timeIn          DateTime?
  outageType      OutageType
  relayIndication String?
  loadLoss        Float      @default(0)
  tagNumber       Int?
  tagHolderId     String?
  tagHolderName   User?      @relation(name: "tagHolder", fields: [tagHolderId], references: [id])
  thirdPartyName  String?
  tagInTime       DateTime?
  tagOutTime      DateTime?
  cause           String?
  resolution      String?
  staffNameTCN    String?
  staffId         String
  staff           User       @relation(fields: [staffId], references: [id])
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

// model LoadReading {
//   id       String @id @default(cuid())
//   feederId String
//   feeder   Feeder @relation(fields: [feederId], references: [id])
//   date DateTime

//   createdAt       DateTime   @default(now())
//   updatedAt       DateTime   @updatedAt
// }

enum Role {
  SUPER
  USER
  MOD
  ADMIN
}

enum Gender {
  MALE
  FEMALE
}

enum StationType {
  TRANSMISSION
  DISTRIBUTION
}

enum VoltageLevel {
  KV33
  KV11
}

enum Designation {
  CHIEF_TECHNICAL_OFFICER
  HEAD_OF_UNIT
  TECHNICAL_MANAGER
  TEAM_LEAD
  TEAM_MEMBER
}

enum OutageType {
  FORCED
  EMERGENCY
  PLANNED
  SBT_COMPLIANCE
  FREQUENCY_CONTROL
  SYSTEM_COLLAPSE
}
